service:
  name: yyt-leaderboard-api

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-prune-plugin
  - serverless-plugin-warmup

provider:
  name: aws
  runtime: nodejs10.x
  stage: production
  region: ap-northeast-2
  tracing:
    apiGateway: true
    lambda: true
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
      Resource:
        - "arn:aws:s3:::${env:BUCKET_NAME}/*"
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource:
        - "arn:aws:s3:::${env:BUCKET_NAME}"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource:
        - Fn::Join:
            - ":"
            - - "arn:aws:lambda"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "function"
              - ${self:custom.putLambda}
        - Fn::Join:
            - ":"
            - - "arn:aws:lambda"
              - Ref: "AWS::Region"
              - Ref: "AWS::AccountId"
              - "function"
              - ${self:custom.bottomHalfLambda}
  environment:
    REDIS_HOST: ${env:REDIS_HOST}
    REDIS_PASSWORD: ${env:REDIS_PASSWORD}
    BUCKET_NAME: ${env:BUCKET_NAME}
    AUTH_KEY: ${env:AUTH_KEY, ""}
    BOTTOM_HALF_LAMBDA: ${self:custom.bottomHalfLambda}
    DEBUG: ${env:DEBUG, ""}
    ELAPSED: ${env:ELAPSED, "1"}
  usagePlan:
    quota:
      limit: 100000
      period: DAY
    throttle:
      burstLimit: 240
      rateLimit: 60

custom:
  putLambda: ${self:service.name}-${self:provider.stage}-put
  bottomHalfLambda: ${self:service.name}-${self:provider.stage}-bottomHalf
  prune:
    automatic: true
    number: 7
  warmup:
    enable: true
    prewarm: true
    events:
      - schedule: "cron(0/10 * ? * * *)" # Run WarmUp every 10 minutes.

functions:
  get:
    handler: src/handler.get
    events:
      - http:
          method: get
          path: /{serviceId}/{period}
          cors: true
  me:
    handler: src/handler.me
    events:
      - http:
          method: get
          path: /{serviceId}/{period}/me
          cors: true
  top:
    handler: src/handler.top
    events:
      - http:
          method: get
          path: /{serviceId}/{period}/top
          cors: true
  around:
    handler: src/handler.around
    events:
      - http:
          method: get
          path: /{serviceId}/{period}/around
          cors: true
  scrollUp:
    handler: src/handler.scrollUp
    events:
      - http:
          method: get
          path: /{serviceId}/{period}/up
          cors: true
  scrollDown:
    handler: src/handler.scrollDown
    events:
      - http:
          method: get
          path: /{serviceId}/{period}/down
          cors: true
  put:
    handler: src/handler.put
    timeout: 10
    memorySize: 2048
    events:
      - http:
          method: put
          path: /{serviceId}/{period}
          cors: true
    warmup:
      enabled: true
  bottomHalf:
    handler: src/handler.bottomHalf
    timeout: 900
  clear:
    handler: src/handler.clear
    events:
      - http:
          method: delete
          path: /{serviceId}/{period}
          cors: true

resources:
  Resources:
    DistBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKET_NAME}
